Python:
	一.Python
		1.数据类型和变量
			a = 10
			a = "abc"
				注：这里变量a不会限定类型
			PI = 3.1415926
			通常常量是用大写字母来定义
			
			/：这个会得到精确的除法的值
			//：这个会对得到的值取整
			
			len()：得到字符串的长度或者集合的个数
			
		2.字符串和编码
			ord():获取字符的整数表示
			chr():将编码转换为对应的字符
			encode():为编码指定的bytes  'ABC'.encode('ascii')
			decode():将bytes转为str	b'ABC'.decode('ascii')
			
			格式化：
				'hello %s' % 'world'      结果： hello world
				
				%d	整数
				%f	浮点数
				%s	字符串
				%x	十六进制整数
			
		3.使用list和tuple
			list列表：
				list = ['1','2','3']
				list.insert(1,'4')      将4插入到集合的索引号为1的位置
				len(list)				集合的个数
				list.pop(i)				删除索引值为i的集合
				list.append()			可以追加元素到结合末尾
			
			tuple元组：(定义时就要确定元素，其他用法list一样)03:00
				tuple被定义下来就不可变了
				tuple = (1,)			当tuple只定义一个元素时，需要加上，消除歧义
				
		4.条件判断
			if :
			else：
			
			if :
			elif:
			else:
			
		5.循环
			a.for循环
				lists = [1,2,3]
				for list in lists:
					print(list)
				
				计算0-100之和
					sum = 0
					for x in range(101):
						sum = sum + x
					print(sum)
			
			b.while循环
				sum = 0
				n = 99
				while n > 0:
					sum = sum +n
					n = n-2
				print(sum)
			
			break:提前退出循环
			continue:提前结束本轮循环，并直接开始下一轮循环
		
		6.dict和set
			1.dict(相当于map，内部存放的顺序和key放入的顺序呢是没有关系的，一个key只能对应一个value)
				dict = {"name":"zhangsan","sex":"nan"}
				
				判断key是否存在：
					key in dict				存在true，反之false 
					dict.get(key)			key不存在则返回none
					dict.get(key,-1)		key不存在则返回-1
				
				删除一个key：
					dict.pop(key)			可删除key并且删除对应的value
				
				dict的特点：
					a.查找和插入的速度极快，不会随着key的增加而变慢
					b.需要占用大量的内存，内存浪费多
				list的特点：
					a.查找和插入的时间随着元素的增加而增加
					b.占用空间小，浪费内存很少
					
			2.set(是key的集合，不存储value，不能有重复的key)
				要创建一个set，需要提供一个list作为输入集合：
				s = set([1,2,3])
				
				s.add(key)					添加元素到set中
				s.remove(key)				从set中删除元素
				
				set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：
				s1 = set([1,2,3])
				s2 = set([1,3,4])
				s1 & s2
				s1 | s2
	
	二.函数
		1.调用函数
			abs()	获取绝对值
			max()	可以传入多个参数，返回最大的那个
			int()
			float()
			str()
			bool()	目前测试，当为0或者为空时返回为false
			
		2.定义函数
			求解方程
				def jisuan(a,b,c):
					if not (isinstance(a,int) or isinstance(b,int) or isinstance(c,int)):
						raise TypeError("bad operand type")
					if b*b < 4*a*c:
						print("方程无解")
					elif b*b == 4*a*c:
						print("方程有两个相同解，为:"+"%.3f" %(-b/(2*a)))
					else:
						x = (-b + math.sqrt(b*b-4*a*c)) / (2*a)
						y = (-b - math.sqrt(b*b-4*a*c)) / (2*a)
					return x,y

				z = jisuan(2,3,1)
				print(z)
			
		3.函数的参数
			A.位置参数
				def power(x,n)
			B.默认参数
				def power(x,n=2)
				
				def add_end(L=None):
					if L is None:
						L = []
					L.aapend("END")
					return L
					
			！！注意：这里的默认参数必须指向不变对象		
				
			C.可变参数
				def calc(*numbers):					//*numbers便是可变参数的定义方式，在函数内部接收到的是tuple
					sum = 0
					for n in numbers:
						sum = sum + n*n
					return sum
				
			D.关键字参数
				def person(name,age,**detail):		//**detail是关键字参数的定义方式，在函数内部接收到的是dict(map)
					print("name:",name,"age:",age,"detail:",detail)
					print("name:"+name+",""age:"+str(age)+",""detail:"+str(detail))  //这里正常输出必须加上str()

				person("yang",23,city="Hongzhou",address="西湖区")
			
			E.命名关键字参数
				def person(name,age,*,city,job): 	//命名关键字需要一个特殊的分隔符*，*以后的参数被认为是命名关键字参数
				
				def person(name,age,*args,city,job)	//如果已经包含了一个可变参数，则不需要一个特殊的分隔符了
				
			！！注意：当以上参数有多种以上出现在函数定义中，必须遵循参数定义顺序：位置参数，默认参数，可变参数，命名关键字参数，关键字参数
																		n		n=2		*n			*，n			**n
				def person(name,age=23,*args,city,**detail):
					print("name:"+name+","
						"age:"+str(age)+","
						"args:"+str(args)+","
						"city:"+str(city)+","03:00
						"detail:"+str(detail))

				person("yang",args=["nanren"],city="Hangzhou",address = "西湖区")		???????这个地方还有问题，需要等待解决												
				
		4.递归函数
			def fact(n):
				if n==1:
					return 1
				return n * fact(n-1)				//这里递归需要注意的是如果n值过大会导致栈溢出
													//RuntimeError: maximum recursion depth exceeded in comparison
												
			(虽然这个方法看起来很厉害，但是由于Python并没有对尾递归做优化，所以还是会栈溢出)
			解决方法采用尾递归进行优化，尾递归是指在函数返回时调用自身本身，并且return语句不能包含表达式(如上就引入了乘法表达式)
			def fact(n):
				return fact_iter(n,1)
			
			def fact_iter(num,result):
				if num == 1:
					return result
				return fact_iter(num - 1,num * result)
			
			汉诺塔算法：
				def hannuo(n,a,b,c):
					if n == 1:
						move(1,a,c)
					else:
						hannuo(n-1,a,c,b)
						move(n,a,c)
						hannuo(n-1,b,a,c)
				
				i = 1
				max = 0
				def move(n,f,t):
					global i
					global max
					if n > max:
						max = n 
					print("第%d步：将%d号盘子从%s柱--->%s柱  目前最大盘子为%s" %(i,n,f,t,max))
					i+=1

				n = int(input())
				hannuo(n,"A","B","C")
				
	三.高级特性
		1.切片
			L = []
			for i in range(20)
				L.append(i)
			
			取L的前三个元素：L[0:3]				//从索引0开始取直到索引3为止，但不包括索引3
			取L的倒数第二个元素：L[-2:-1]			//倒数第一个元素的索引为-1
			取L的前十个每两个取一个：L[:10:2]		
			所有元素每两个取一个：L[::2]	
			取出所有元素L[:]
			
			字符串进行切片操作
				"abcdefg"[:3]
					
			tuple进行切片操作
				tuple = (1,2,3,4,5)
				tuple[:3]
		
		2.迭代
			dict:
			dict = {"a":1,"b":2,"c":3}
				迭代key：
					for key in dict:
						print(key)
				迭代value：
					for value in dict.values():
						print(value)
				同时迭代key和value：
					for k,v in dict.items():
						print(k,v)
			
			判断一个对象是不是可迭代对象
				from collections import Iterable
				isinstance("abc",Iterable)		//若返回值为true则可迭代
				
			list实现下表循环：(这里的enumerate函数可以将list变成索引-元素对)
				for i,value in enumerate([1,2,3,4]):
					print(i,value)
			
			字符串迭代：
				for ch in "abcdef":
					print(ch)
		
		3.列表生成式
			a.list(range(1,11))								//快速生成1-11的list
			b.[n * n for n in range(1,11)]  				//快速生成1-11的平方的list
			c.[n * n for n in range(1,11) if n % 2 == 0]  	//筛选出仅偶数的平方
			d.[m + n for m in "ab" for n in "cd"]			//from character.character 两层循环生成全排列
			e.import os
			  [d for d in os.listdir(".")]					//os.listdir可以列出文件和目录
			f.[s.lower() for s in "ABC"]					//将字符串变成小写字母
			
		4.生成器
			创建方式：
				a.g = (n * n for n in range(10))
				b.斐波那契数列
					def fib(max):
						n,a,b = 0,0,1
						while n < max:
							yeild b				//这里运行的规律
							a,b = b,a+b
							n = n + 1
						return "done"
				c.杨辉三角
					def triangles(max):
						b,n = [1],0
						while n < max
							n += 1
							yield b
							b = [1] + [b[i] + b[i+1] for i in range(len(b)-1)] + [1]
						
					max = int(input())
					for i in triangles(max):
						print(i)
			
		5.迭代器
			判断一个对象是否是Iterator对象：
			from collections import Iterator
			isinstance(triangles(max),Iterator)
			
			可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator
			
			iter():可以将Iterable变成Iterator
			
			凡是可作用于for循环的对象都是Iterable类型；

			凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；

			集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。
	
	四.函数式编程
		1.高阶函数(一个函数接收另一个函数作为参数，这样的函数称之为高阶函数)
			变量可以指向函数
				abs()
				f = abs
		
			传入函数
				def add(x,y,f):
					return f(x) + f(y)
				
				add(1,2,f)
				
			A.map/reduce
				a.将列表中的名字规范化，首字母大写其余字母小写(用了两种方法)
					L1 = ["adam","LISA","barT"]

					def normalize(name):
						#first = name[0].upper()
						#second = name[1:].lower()
						#return first + second
						return name.capitalize()				//capitalize()这个方法是将字符串的第一个字母大写
					L2 = list(map(normalize,L1))
					print(L2)

				b.利用reduce()求积
					from functools import reduce

					def prod(L):
						return reduce(lambda x,y:x * y,L)		//lambda？？？？？？？后面补上
					print("3 * 5 * 7 * 9 =",prod([3,5,7,9]))

				c.利用map和reduce将str转为float
					def str2float(s):
						L = s.split(".",1)						//以"."切割字符串,切割一次
						return reduce(lambda x,y:x * 10 + y,map(int,L[0])) + 
							   reduce(lambda x,y:x * 10 + y,map(int,L[1]))/(10**len(L[1]))
	
			B.filter(用于过滤序列，也是接收一个函数和一个序列，函数作用于每一个元素，并根据返回的true or false决定是否删除对应元素)
				判断回文数
					def is_palindrome(n):
						m = list(str(n))
						for i in range(len(m)):
							return m[i] == m[len(m)-1]

					output = filter(is_palindrome,range(1,1000))
					print(list(output))
			
			C.sorted(可对list进行排序，key指定的函数将作用于每一个元素上，，并根据key函数返回的结果进行排序)
				L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]
				def by_name(t):
					return t[0]
				L = sorted(LL,key = by_name)
				print(L)
		
		2.返回函数(高阶函数还可以将函数作为结果值返回)
			def lazy_sum(*args):
				def sum():
					ax = 0
					for n in args:
						ax = ax + n
					return ax
				return sum
			f1 = lazy_sum(1,2,3)
			f2 = lazy_sum(1,2,3)
			f1 == f2	结果为： false
			
			闭包：
				def count():
					fs = []
					for i in range(1, 4):
						def f():
							 return i*i
						fs.append(f)
					return fs

				f1, f2, f3 = count()		//每次循环都会创建一个新的函数，然后把创建的3个函数都返回了，但因为用的一直都是局部变量，所以当i变成3时三个函数中的i也全部是3了
				
				优化：
				def count():
					def f(j):
						def g():
							return j*j
						return g
					fs = []
					for i in range(1, 4):
						fs.append(f(i)) 	// f(i)立刻被执行，因此i的当前值被传入f()
					return fs
				
				利用lambda简化上面优化后的函数	//ps：这个简化简直丧心病狂
				def count():
					return list(map(lambda j:lambda:j*j,range(1,4)))		----->		j:对应着f(j)函数的参数，lambda:j*j整体对应着返回的g
																						lambda:jj拆开来看，冒号前为空对应着g()，j*j对应着函数g()的返回值
					
		3.匿名函数(就是一直出现的lambda)
			def f(x):
				return x * x
				
			用上面这个简单的作为例子，简述一下lambda函数
			lambda x: x * x	-------------------------> ：号前的x对应上面函数的参数，冒号后的表达式对应着上面的return
			
		4.装饰器(用来在函数运行期间动态增强一个函数的功能)
			#带参和无参的装饰器
			import types

			def log(text):
				if isinstance(text,types.FunctionType):				//判断text是否是函数
				#if callable(text)									//判断text是否可以被调用和上面功能一样
					@functools.wraps(text)							//将被增强函数的__name__等属性复制到wrapper函数中，防止某些依赖函数签名的代码执行会出错
					def wrapper(*args,**kw):
						print("begin call %s()" % text.__name__)	
						f = func(*args,**kw)
						print("end call")
						return f
				else:
					def decorator(func):
						def wrapper(*args,**kw):
							print("%s begin call %s()" % (text,func.__name__))
							f = func(*args,**kw)
							print("end call")
							return f
						return wrapper
					return decorator

			@log("execute")
			def now():
				t = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
				print(t)

			now()
			
		5.偏函数
			function.partial()
			
	五.模块
		1.使用模块
			
			作用域
				如_a和__a则相当于定义为private，不应该被直接引用
			
		2.安装第三方模块
			
	六.面向对象编程
		1.类和实例
			class Student(object):					//类名通常是大写开头的单词，(object)代表着继承的类
				
				def __init__(self,name,score):		//这里self永远是__init__方法的的第一个参数。表示创建的实例本身
					self.name = name
					self.score = score
		  数据封装
		  	class Student(object):
				
				def __init__(self,name,score):
					self.name = name
					self.score = score
				
				def print_s(self):
					print("%s : %s" % (self.name,self.score))
				
		2.访问限制
			class Student(object):
				def __init__(self, name, score):
					self.__name = name				//这里的__name被解释器对外变成了_Student__name
					self.__score = score

				def print_score(self):
					print('%s: %s' % (self.__name, self.__score))
			
				def get_name(self):
					return self.__name

				def get_score(self):
					return self.__score
			
				def set_score(self, score):
        			self.__score = score
			
			!!! 这里需要注意__xxx__以双下划线开头和结尾的是特殊变量是可以直接访问的，__xx以双下划线开头的是定义为private变量
			_xx以单下划线开头的变量外部是可以访问的，但是按照约定当你看到这样的变量请视为私有变量
			
		3.继承和多态
			class Animal(object):
				def run(self):
					print("animals are living")

			class Dog(Animal):
				def run(self):
					print("dogs are living")

			class Stone(object):
				def run(self):
					print("stone is dead")

			def run_s(x):
				x.run()
			
			run_s(Animal())
			run_s(Dog())
			run_s(Stone())
			
			对于函数run_s(x)并不需要传入具体的类型，只需要传入的参数有run()方法即可
			
		4.获取对象信息
			type():	判断对象类型  type(x) == types.FunctionType 判断x是否是函数
			isinstance()
			
			dir():	获得一个对象的所有属性和方法
			
			hasattr(obj,"x")	//obj是否包含属性x
			getattr()
			setattr()
			
		5.实例属性和类属性
			def Student(object):
				name = "Student"	//该属性被称为类属性
				
			s = Student()
			s.name = "test"			//这样类属性会被实例属性屏蔽掉
	
	七.面向对象高级编程
		1.使用__slots__
			class Student(object):
				pass
			s = Student()
			
			def set_age(self,age):
				self.age = age
			
			//给实例s绑定一个方法，但是对于另一个实例不起作用
			from types import MethodType
			s.set_age = MethodType(set_age,s)
			
			//给所有实例都绑定方法
			Student.set_age = set_age
			
			class Student(object):
				__slots__ = ("name","age")			//用tuple定义允许绑定的属性名称，，这种方法仅对当前实例有效，不能作用于子类
				
		2.使用@property
			class Screen(object):
				@property
				def width(self):
					return self.__width

				@width.setter
				def width(self,width):
					self.__width = width
	
				@property
				def height(self):
					return self.__width

				@height.setter
				def height(self,height):
					self.__height = height

				@property
				def resolution(self):
					return self.__width * self.__height
			
			这里只设置resolution的getter方法，可看成只读属性
			
		3.多重继承
			class Animal(object):
				pass
			class Mammal(Animal):
				pass
			class Runnable(object):
				pass
			class Flyable(object):
				pass
				
			class Dog(Mammal,RunnableMixIn):		//设计类的继承关系时，通常主线都是单一继承下来，需要加入额外的功能，可以通过多重继承可以实现，这种设计称为MixIn
				pass
			class Bat(Mammal,Flyable):
				pass
			
			class Father(object):
				def func(self):
					print("生父打儿子")
			class Laowang(object):
				def func(self):
					print("老王打儿子")
				def fun1(self):
					print("我才是你亲爹")
			class Stepfather():
				def func(self):
					print("我不打你")
				def fun1(self):
					print("我不是你爹")
			class Child(Father,Laowang,Stepfather):
				pass
			c = Child()
			c.func()
			c.fun1()
				
		4.定制类
			a.__str__
				class Student(object):
					def __init__(self, name):
						self.name = name
					def __str__(self):
						return 'Student object (name=%s)' % self.name
					#__repr__ = __str__			//这一句只有当在命令行时需要，正常代码中测试结果并没有什么区别
				
			b.__iter__(使一个类可以被用于循环)
				class Fib(object):
					def __init__(self):
						self.a, self.b = 0, 1 					 # 初始化两个计数器a，b

					def __iter__(self):
						return self 							 # 实例本身就是迭代对象，故返回自己

					def __next__(self):
						self.a, self.b = self.b, self.a + self.b # 计算下一个值
						if self.a > 100000: 					 # 退出循环的条件
							raise StopIteration()
						return self.a 							 # 返回下一个值
				for n in Fib():
					print(n)
				
			c.__getitem__(使类表现的像list那样按照下标取出元素)
				class Fib(object):
					def __getitem__(self,n):
						a,b = 1,1
						for x in range(n):
							a,b = b,a+b
						return a
					
				class Fib(object):					//考虑list切片功能
					def __getitem__(self, n):
						if isinstance(n,int):
							a,b = 1,1
							for x in range(n):
								a,b = b,a + b
							return a
						if isinstance(n,slice):
							start = n.start
							stop = n.stop
							if start is None:
								start = 0
							L = []
							a,b = 1,1
							for x in range(stop):
								if x >= start:
									L.append(a)
								a,b = b,a + b
							return L
				print(Fib()[0:5])
			
			d.__getattr__
											//这种完全动态的调用可以用于REST API的调用
				class Chain(object):
					def __init__(self, path=''):
						self._path = path
					def __getattr__(self, path):
						return Chain('%s/%s' % (self._path, path))
					def users(self,user):
						return Chain('%s/%s' % (self._path,user))
					def __str__(self):
						return self._path
					__repr__ = __str__

				print(Chain().users('yrs').users('fzl').repos)
				
			e.__call__
				class Student(object):
					def __init__(self, name):
						self.name = name
					def __call__(self):
						print('My name is %s.' % self.name)
				s = Student("yrs")
				s()
					
				通过callable()函数判断一个对象是否是“可调用”对象

		5.使用枚举类
			from enum import Enum ,unique

			Month = Enum("Month",('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))
			for name,member in Month.__members__.items():		//这里使用__members__可以将重复的成员也遍历出来(这里比较特殊全都是成员名称，成员名称是不允许重复的)
				print(name, '=>', member, ',',member.value)

			@unique					//这个装饰器的作用是保证没有重复值
			class Weekday(Enum):
				Sun = 0
				Mon = 1
				Tue = 2
				Wed = 3
				Thu = 4
				Fri = 5
				Sat = 6
			mon = Weekday.Mon
			mon = Weekday['Mon']
			mon = Weekday(1)
			value = mon.value
					
		6.使用元类
			a.type()
				
				def fn():
					pass
				Hello = type('Hello',(object,),dict(hello=fn))
					
				type()函数创建一个class对象需要一次传入3个参数：
					(1)class的名称
					(2)继承的父类集合。注意Python支持多重继承，如果只有一个父类，别忘了tuple的氮元素写法
					(3)class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上
				
			b.metaclass
				除了使用type()动态创建类以外，metaclass也可以控制类的创建行为。metaclass，直译为元类
					
				class xxMetaclass(type):
					def __new__(cls,name,bases,attrs):
					return type.__new__(cls,name,bases,attrs)
				__new__()方法接收到的参数依次是：
					(1)当前准备创建的类的对象
					(2)类的名字
					(3)类继承的父类集合
					(4)类的方法集合
					
				！！！！！！！暂时理解不透-------以后回来理解
					
	八.错误，调试和测试
		1.错误处理
			try
				try:
				execpt:
				(else:)
				finally:
			
			logging
				logging.exception()
			
			抛出错误
				class Error(BaseException):
					pass
				raise Error()
			
		2.调试
			logging
				import logging
				logging.basicConfig(level = logging.INFO)
		
		3.单元测试
			import unittest
			class Test(unitest.TestCase):
				pass
			
		4.文档测试
			def fact(n):
				'''
				>>> fact(0)
				Traceback (most recent call last):
					...
				ValueError
				>>> fact(1)
				1
				>>> fact(2)
				2
				'''
				if n < 1:
					raise ValueError()
				if n == 1:
					return 1
				return n * fact(n - 1)

			if __name__ == '__main__':
				import doctest
				doctest.testmod()
			
			如果这里的example全部正确，运行结果是无输出的
	
	九.IO编程
		1.文件读写
			读文件：
				f = open(path,"r")	//读取文本文件
				f.read()
				
				try:
					f = open('/path/to/file', 'r')		 等价		with open('/path/to/file', 'r') as f:
					print(f.read())						<====>			print(f.read())
				finally:
					if f:
						f.close()
			
				f = open('/Users/michael/test.jpg', 'rb')		//读取二进制文件，比如图片视频
				
				f = open(path,"r",encoding="gbk")				//读取指定非UTF-8编码的文件
			
			写文件：
				f = open(path,"w")
				f.write("")
				f.close()
				
		2.StringIO和BytesIO
			StringIO:
				from io import StringIO
				f = StringIO()
				a = f.write("1111")
				print(a)
				print(f.getvalue())		//获得写入后的str
				
				f = StringIO("Hello!\nPython!!")
				while 1:
					s = f.readline()
					if s == '':
						break
					print(s.strip())
			
			BytesIO:
				from io import BytesIO
				f = BytesIO()
				f.write("中文".encode("utf-8"))
				
		3.操作文件和目录
			os.path.abspath(".")					//当前目录的绝对路径
			os.path.join("/users/name","yangrs")	//在某个目录下新建一个目录，此方法将新目录的完整路径表示出来(这样可以避免拼接字符串错误)
			os.path.mkdir("")						//创建一个目录
			os.path.rmdir("")						//删除一个目录
			os.path.split("")						//拆分路径
			os.path.splitext("")					//直接得到文件扩展名
			os.rename("a","b")						//将文件a重命名为b
			os.remove("")							//删除文件
		
		编写一个程序，能在当前目录以及当前目录的所有子目录下查找文件名包含指定字符串的文件，并打印出相对路径。
			def find_p(path,str):
				if path != None and str != "":
					for x in os.listdir(path):
						if os.path.isdir(x):
							find_p(os.path.join(path,x),str)
						elif str in x:
							print(os.path.join(path,x))
			find_p(os.path.abspath("."),"ba")
		
		4.序列化
			import pickle
			d = dict(name = "yrs",age = 23)
			f = open("/home/yangrs/Desktop/pickle.txt","wb")
			pickle.dump(d,f)
			f.close()
			
			反序列化:
			f = open(path,"rb")
			pickle.load(f)

			JSON:
				import json
				json.dumps(dict)	//将dict转为json
				json.dump(dict,f)	//将json写入文件中
				json.loads(JsonStr)	//将json字符串转成对象
				json.load(f)		//从文件中将json字符串转为对象
				
				Object==>JSON:	//Object不能直接转为json首先要经过dict的变化，同理json转为Object时也需要先经过dict的变化
				
					class Student(object):
						def __init__(self, name, age, score):
							self.name = name
							self.age = age
							self.score = score
							
					def student2dict(std):
						return {
							'name': std.name,
							'age': std.age,
							'score': std.score
						}

					s = Student('Bob', 20, 88)
					print(json.dumps(s, default=student2dict))
					
					Object转为JSON较为通用的方法是：
						json.dumps(object,default=lambda obj:obj.__dict__)
				
				JSON==>Object:
					def dict2student(d):
    					return Student(d['name'], d['age'], d['score'])
					json.loads(JsonStr,object_hook=dict2student)
		
	十.进程和线程
		1.多进程
			import os
			
			print('Process (%s) start...' % os.getpid())
			pid = os.fork()										//fork()会返回两个值，值为0时代表子进程
			print(pid)
			if pid == 0:
				print('I am child process (%s) and my parent is %s.' % (os.getpid(), os.getppid()))
			else:
				print('I (%s) just created a child process (%s).' % (os.getpid(), pid))
				
			muliprocessing：
				import os
				from  multiprocessing import Process

				def run_proc(name):
					print("This child process is named %s(进程号：%s)" %(name,os.getpid()))

				if __name__ == "__main__":
					print("Now,parent process's pid is %s" % os.getpid())
					p = Process(target=run_proc,args=("test",))
					p.start()
					p.join()									//join()等待子线程运行结束在运行下面的代码
					print("END")
			
			Pool：
				from multiprocessing import Pool
				import time,random

				def long_time_task(name):
					print('Run task %s(进程号:%s)' % (name,os.getpid()))
					start = time.time()
					time.sleep(random.random())
					end = time.time()
					print('Task %s runs %0.3f seconds...' % (name,(end - start)))

				if __name__ == '__main__':
					print("Parent process's pid %s..." % os.getpid())
					p = Pool(4)											//Pool(4)会启动四个子进程
					for i in range(5):
						p.apply_async(long_time_task,args=(i,))
					print("Waiting for all subprocesses done...")
					p.close()
					p.join()
					print("All subprocess done...")
					
			子进程：
				import subprocess
				print('$ nslookup www.python.org')
				r = subprocess.call(['nslookup', 'www.python.org'])
				print(r)

				p = subprocess.Popen(["nslookup"],stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
				o,e = p.communicate(b"set q=mx\npython.org\nexit\n")
				print(o.decode("utf8"))
				print(e.decode("utf8"))
			
			进程间通信：
				from multiprocessing import Queue
				def write(q):
					print("Process to write is %s" % os.getpid())
					for str in ["A","B","C"]:
						print("Put %s to queue" % str)
						q.put(str)
						time.sleep(1)

				def read(q):
					print("Process to read is %s" % os.getpid())
					while 1:
						str = q.get(1)
						print("Get %s from queue" % str)

				if __name__ == "__main__":
					print("Parent process is %s" % os.getpid())
					q = Queue()
					process_w = Process(target=write,args=(q,))
					process_r = Process(target=read,args=(q,))
					process_w.start()
					process_r.start()
					process_w.join()
					process_r.terminate()
					
				在Unix/Linux下，可以使用fork()调用实现多进程。

				要实现跨平台的多进程，可以使用multiprocessing模块。

				进程间通信是通过Queue、Pipes等实现的。
			
		2.多线程
			Python提供了两个模块，_thread和threading  _thread是低级模块，threading是高级模块
			创建线程的方法：
				def run_c():
					pass
				threading.Thread(target=run_c,name="Thread_run")		//将线程需要执行的方法传入，name是给线程起的名字
				threading.current_thread(),name							//获取当前线程的名字
				lock = threading.Lock()									
				lock.acquire()											//获取锁
				lock.realse()											//释放锁(获取锁后一定要释放锁，通常放在finally中使用)
				
		3.ThreadLocal
			import threading

			# 创建全局ThreadLocal对象:
			local_school = threading.local()

			def process_student():
				# 获取当前线程关联的student:
				std = local_school.student
				print('Hello, %s (in %s)' % (std, threading.current_thread().name))

			def process_thread(name):
				# 绑定ThreadLocal的student:
				local_school.student = name
				process_student()

			t1 = threading.Thread(target= process_thread, args=('Alice',), name='Thread-A')
			t2 = threading.Thread(target= process_thread, args=('Bob',), name='Thread-B')
			t1.start()
			t2.start()
			t1.join()
			t2.join()

		4.进程 vs. 线程
			
		5.分布式进程
			
			详见Python/Thread/task_master.py 和 /Python/Thread/task_worker.py
	
	十一.正则表达式
		在正则表达式中，如果给出字符，就是精确匹配
		
		\s	 :可以匹配一个空格
		\d 	 :可以匹配一个数字
		\w 	 :可以匹配一个字母或数字
		.  	 :可以匹配任意字符
		*  	 :可以匹配任意个字符
		+  	 :表示至少一个字符
		?  	 :表示0个或1个字符
		{n}	 :表示n个字符
		{n,m}:表示n-m个字符
		特殊字符需要/转义
		
		做更精确的匹配，用[]表示范围
		[0-9a-zA-Z\_]		:可以匹配一个数字，字母或者下划线
		[0-9a-zA-Z\_]+		:可以匹配一个至少由一个数字、字母或者下划线组成的字符串
		[0-9a-zA-Z\_]*		:匹配任意个由一个数字、字母或者下划线组成的字符串
		[0-9a-zA-Z\_]{0,19} :可以匹配一个至少由一个数字、字母或者下划线组成的长度为19的字符串
		
		A|B	:可以匹配A或B
		^	:表示行的开头
		$	:表示行的结束
		
		切分字符串：
			re.split(r"\s+",str)	//以空格为切割符
			
		分组：
			m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
			m.group(0)	//是原始字符串
			m.group(1)	//是子串
			
		贪婪匹配：
			正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符
			
			re.match(r'^(\d+?)(0*)$', '102300')	//加个?就可以让\d+采用非贪婪匹配
			
		编译：
			当我们在Python中使用正则表达式时，re模块内部会干两件事情：

				a.编译正则表达式，如果正则表达式的字符串本身不合法，会报错；

				b.用编译后的正则表达式去匹配字符串。
			
			r = re.compile(r"....")
			r.match(str)
	
	十二.常用内建模块
		1.datetime
			
			from datetime import datetime
			
			当前时间:			datetime.now()
			获取指定日期和时间:	 datetime(2015.4.19,12,20)
			datetime转时间戳:	datetime().timestamp()
			时间戳转换datetime:	datetime.fromtimestamp(t)
			str转换为datetime:  datetime.strptime("2017-9-28 15:39:39","%Y-%m-%d %H:%M:%S")	
			datetime转换为str:  datetime.strftime("")
			
			时间加减：
			from date import timedelta
			datetime.now() + timedelta(hours = 1)
			
			本地时间转换为UTC时间：
				from datetime import datetime,timedelta,timezone
				utc = timezone(timedelta(hours=))		//创建时区
				t.replace(tzinfo = utc)					//强制设置时区为
			
			时区转换：
				# 拿到UTC时间，并强制设置时区为UTC+0:00:
					utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)
				# astimezone()将转换时区为北京时间:
					bj_dt = utc_dt.astimezone(timezone(timedelta(hours=8)))
		
		2.collections
		
			namedtuple:namedtuple是一个函数，它用来创建一个自定义的tuple对象，并且规定了tuple元素的个数，并可以用属性而不是索引来引用tuple的某个元素
				Circle = namedtuple('Circle', ['x', 'y', 'r'])
				c = Cirle(1,2,3)
				c.x = 1
				
			deque:	
				deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈
				from collections import deque
				q = deque(['a', 'b', 'c'])
				q.append('x')
				q.appendleft('y')
				deque除了实现list的append()和pop()外，还支持appendleft()和popleft()，这样就可以非常高效地往头部添加或删除元素
			
			defaultdict:
				使用dict时，如果引用的Key不存在，就会抛出KeyError。如果希望key不存在时，返回一个默认值，就可以用defaultdict
				
		
		3.base64
			import base64
			base64.b64encode(b'binary\x00string')
			base64.b64decode(b'YmluYXJ5AHN0cmluZw==')
		
		4.struct
		5.hashlib
			提供了常见的摘要算法，摘要算法又称哈希算法、散列算法。
			
			import hashlib
			md5 = hashlib.md5()
			md5.update(''.encode("utf-8"))
			print(md5.hexdigest())
			
			sha1 = hashlib.sha1()
			sha1.update('how to use sha1 in '.encode('utf-8'))
			sha1.update('python hashlib?'.encode('utf-8'))
			print(sha1.hexdigest())
			
			#加盐
				db = {}

				def register(user,pwd):
					db[user] = getMd5PWD(user,pwd)

				def getMd5PWD(user,pwd):
					str = user + pwd + "dtdream"
					md5 = hashlib.md5()
					md5.update(str.encode("utf-8"))
					return md5.hexdigest()

				def login(user,pwd):
					if db[user] == getMd5PWD(user,pwd):
						print(True)
					else:
						print(False)
		
		6.itertools
		7.contextlib
		8.XML
		9.HTMLParser
		10.urllib
	
	十三.常用第三方模块
		1.PIL
			#验证码
			from PIL import Image,ImageDraw,ImageFont,ImageFilter

			import random

			##随机字母
			def rndChar():
				return chr(random.randint(65,90))

			##随机颜色
			def rndColor():
				return (random.randint(64,255),random.randint(64,255),random.randint(64,255))

			def rndColor1():
				return (random.randint(32, 127), random.randint(32, 127), random.randint(32, 127))

			width = 4*60
			height = 60

			image = Image.new('RGB',(width,height),(255,255,255))

			##创建font对象
			font = ImageFont.truetype('/usr/share/fonts/truetype/ttf-bitstream-vera/Vera.ttf',36)

			##创建draw对象
			draw = ImageDraw.Draw(image)

			##填充每个像素
			for x in range(width):
				for y in range(height):
					draw.point((x,y),fill=rndColor())

			##输出文字
			for t in range(4):
				draw.text((60 * t + 10, 10), rndChar(), font=font, fill=rndColor1())

			##模糊图片
			#image = image.filter(ImageFilter.BLUR)

			##保存图片
			image.save('code1.jpg', 'jpeg')

			##显示图片
			#image.show()
	
	十四.virtualenv
	
	十五.图形界面
	
	十六.网络编程
		1.TCP/IP简介
		2.TCP编程
		3.UDP编程
	
	十七.电子邮件
		1.SMTP发送邮件
		2.POP3收取邮件
	
	十八.访问数据库
		1.使用SQLite
		2.使用MySQL
		3.使用SQLAlchemy
	
	十九.Web开发
		1.HTTP协议简介
		2.HTML简介
		3.WSGI接口
		4.使用web框架
		5.使用模板
	
	二十.异步IO
		1.协程
		2.sayncio
		3.asunc/await
		4.aiohttp
		
		
		